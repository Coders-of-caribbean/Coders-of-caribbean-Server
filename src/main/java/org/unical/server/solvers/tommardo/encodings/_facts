dxOdd(0,1). dxOdd(1,1). dxOdd(2,0). dxOdd(3,-1). dxOdd(4,0). dxOdd(5,1).
dyOdd(0,0). dyOdd(1,-1). dyOdd(2,-1). dyOdd(3,0). dyOdd(4,1). dyOdd(5,1).

dxEven(0,1). dxEven(1,0). dxEven(2,-1). dxEven(3,-1). dxEven(4,-1). dxEven(5,0).
dyEven(0,0). dyEven(1,-1). dyEven(2,-1). dyEven(3,0). dyEven(4,1). dyEven(5,1).

row(0..22).
col(0..20).
cell(X,Y) :- row(X), col(Y).

pari(0).
pari(X) :- dispari(Y), Y = X-1, X <= 22.
dispari(X) :- pari(Y), Y = X-1, X <= 22.

%proiezioni per safety
barrelPos(X,Y) :- barrel(X,Y,_).
playerPos(X,Y) :- player(X,Y,_,_,_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                            % CALCOLO DISTANZE TRA ENTITA' %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cell3D(R,C, X, Y, Z) :- cell(R,C),
                        &mod(C,2;Mod),
                        X = R - (C-Mod)/2,
                        Z = C,
                        Y = -X-Z.

player3D(X,Y,Z) :- cell3D(R,C,X,Y,Z),
                   player(R,C,_,_,_).

enemy3D(X,Y,Z) :-  cell3D(R,C,X,Y,Z),
                   enemy(R,C,_,_,_).

barrel3D(X,Y,Z) :- cell3D(R,C,X,Y,Z),
                   barrel(R,C,_).

mine3D(X,Y,Z) :-   cell3D(R,C,X,Y,Z),
                   mine(R,C).

entity(X,Y,Z) :- player3D(X,Y,Z).
entity(X,Y,Z) :- enemy3D(X,Y,Z).
entity(X,Y,Z) :- barrel3D(X,Y,Z).
entity(X,Y,Z) :- mine3D(X,Y,Z).

distance(X1,Y1,Z1,X2,Y2,Z2,D) :- entity(X1,Y1,Z1),
                                 entity(X2,Y2,Z2),
                                 &abs(X1-X2;XA),
                                 &abs(Y1-Y2;YA),
                                 &abs(Z1-Z2;ZA),
                                 D = (XA + YA + ZA) /2.

e_b(RN,CN,RB,CB,D) :- distance(XN,YN,ZN,XB,YB,ZB,D),
                       enemy3D(XN,YN,ZN),
                       barrel3D(XB,YB,ZB),
                       cell3D(RN,CN,XN,YN,ZN),
                       cell3D(RB,CB,XB,YB,ZB).


p_e(RN,CN,D) :- distance(XP,YP,ZP,XN,YN,ZN,D),
                player3D(XP,YP,ZP),
                enemy3D(XN,YN,ZN),
                cell3D(RN,CN,XN,YN,ZN).


p_b(R,C,D) :- distance(X,Y,Z,X2,Y2,Z2,D),
              barrel3D(X,Y,Z),
              player3D(X2,Y2,Z2),
              cell3D(R,C,X,Y,Z).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        % CALCOLO COORDINATE PRUA E POPPA %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PLAYER

dirMin4 :- player(_,_,_,_,Dir), Dir != 0, Dir != 3, Dir < 4.
dirMag3 :- player(_,_,_,_,Dir), Dir != 0, Dir > 3.

{playerBow(X,Y): cell(X,Y)} = 1.
{playerStern(X,Y): cell(X,Y)} = 1.

:- player(X,Y,_,_,Dir), pari(Y), dxEven(Dir,Xoff), dyEven(Dir,Yoff),
   not playerBow(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1).

:- player(X,Y,_,_,Dir), dispari(Y), dxOdd(Dir,Xoff), dyOdd(Dir,Yoff),
   not playerBow(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1).

% se la direzione del player Ã¨ 0 oppure 3 allora la stern si trova in posizione
% perfettamente opposta alla bow, altrimenti si trova a 3 direzioni di distanza dalla bow

:- not dirMin4, not dirMag3,
   player(X,Y,_,_,Dir), pari(Y), dxEven(Dir,Xoff), dyEven(Dir,Yoff),
   not playerStern(X1,Y1),
   X1 = X - Xoff, Y1 = Y - Yoff,
   cell(X1, Y1).

:- not dirMin4, not dirMag3,
   player(X,Y,_,_,Dir), dispari(Y), dxOdd(Dir,Xoff), dyOdd(Dir,Yoff),
   not playerStern(X1,Y1),
   X1 = X - Xoff, Y1 = Y - Yoff,
  cell(X1, Y1).

:- dirMin4, not dirMag3,
   player(X,Y,_,_,Dir), pari(Y), dxEven(DirOff,Xoff), dyEven(DirOff,Yoff),
   not playerStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir + 3.

:- dirMin4, not dirMag3,
   player(X,Y,_,_,Dir), dispari(Y), dxOdd(DirOff,Xoff), dyOdd(DirOff,Yoff),
   not playerStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir + 3.

:- not dirMin4, dirMag3,
   player(X,Y,_,_,Dir), pari(Y), dxEven(DirOff,Xoff), dyEven(DirOff,Yoff),
   not playerStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir - 3.

:- not dirMin4, dirMag3,
   player(X,Y,_,_,Dir), dispari(Y), dxOdd(DirOff,Xoff), dyOdd(DirOff,Yoff),
   not playerStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir - 3.


% enemies
{enemyBow(X,Y): cell(X,Y)} = 2.
{enemyStern(X,Y): cell(X,Y)} = 2.

% mi devo assicurare di fare riferimento allo specifico nemico che si trova in X,Y
dirEnemyMag3(X,Y) :- enemy(X,Y,_,_,Dir), Dir != 0, Dir > 3.
dirEnemyMin4(X,Y) :- enemy(X,Y,_,_,Dir), Dir != 0, Dir != 3, Dir < 4.

:- enemy(X,Y,_,_,Dir), pari(Y), dxEven(Dir,Xoff), dyEven(Dir,Yoff),
   not enemyBow(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1).

:- enemy(X,Y,_,_,Dir), dispari(Y), dxOdd(Dir,Xoff), dyOdd(Dir,Yoff),
   not enemyBow(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1).

:- not dirEnemyMin4(X,Y), not dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), pari(Y), dxEven(Dir,Xoff), dyEven(Dir,Yoff),
   not enemyStern(X1,Y1),
   X1 = X - Xoff, Y1 = Y - Yoff,
   cell(X1, Y1).

:- not dirEnemyMin4(X,Y), not dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), dispari(Y), dxOdd(Dir,Xoff), dyOdd(Dir,Yoff),
   not enemyStern(X1,Y1),
   X1 = X - Xoff, Y1 = Y - Yoff,
   cell(X1, Y1).

:- dirEnemyMin4(X,Y), not dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), pari(Y), dxEven(DirOff,Xoff), dyEven(DirOff,Yoff),
   not enemyStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir + 3.

:- dirEnemyMin4(X,Y), not dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), dispari(Y), dxOdd(DirOff,Xoff), dyOdd(DirOff,Yoff),
   not enemyStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir + 3.

:- not dirEnemyMin4(X,Y), dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), pari(Y), dxEven(DirOff,Xoff), dyEven(DirOff,Yoff),
   not enemyStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir - 3.

:- not dirEnemyMin4(X,Y), dirEnemyMag3(X,Y),
   enemy(X,Y,_,_,Dir), dispari(Y), dxOdd(DirOff,Xoff), dyOdd(DirOff,Yoff),
   not enemyStern(X1,Y1),
   X1 = X + Xoff, Y1 = Y + Yoff,
   cell(X1, Y1), DirOff = Dir - 3.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        % CALCOLO VICINATO DELLA NAVE %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% devo avere dei fatti del tipo:
% bowNeighbour(X,Y,Dir)
% pivotNeighbour(X,Y,Dir)
% sternNeighbour(X,Y,Dir)

dirs(0..5).

bowNeighbour(X1,Y1,Dir) :- playerBow(X,Y),
                           pari(Y), dirs(Dir),
                           dxEven(Dir,Xoff), dyEven(Dir, Yoff),
                           X1 = X + Xoff, Y1 = Y + Yoff,
                           cell(X1, Y1).

bowNeighbour(X1,Y1,Dir) :- playerBow(X,Y),
                           dispari(Y), dirs(Dir),
                           dxOdd(Dir,Xoff), dyOdd(Dir, Yoff),
                           X1 = X + Xoff, Y1 = Y + Yoff,
                           cell(X1, Y1).

pivotNeighbour(X1,Y1,Dir) :- playerPos(X,Y),
                             pari(Y), dirs(Dir),
                             dxEven(Dir,Xoff), dyEven(Dir, Yoff),
                             X1 = X + Xoff, Y1 = Y + Yoff,
                             cell(X1, Y1).

pivotNeighbour(X1,Y1,Dir) :- playerPos(X,Y),
                             dispari(Y), dirs(Dir),
                             dxOdd(Dir,Xoff), dyOdd(Dir, Yoff),
                             X1 = X + Xoff, Y1 = Y + Yoff,
                             cell(X1, Y1).

sternNeighbour(X1,Y1,Dir) :- playerStern(X,Y),
                             pari(Y), dirs(Dir),
                             dxEven(Dir,Xoff), dyEven(Dir, Yoff),
                             X1 = X + Xoff, Y1 = Y + Yoff,
                             cell(X1, Y1).

sternNeighbour(X1,Y1,Dir) :- playerStern(X,Y),
                             dispari(Y), dirs(Dir),
                             dxOdd(Dir,Xoff), dyOdd(Dir, Yoff),
                             X1 = X + Xoff, Y1 = Y + Yoff,
                             cell(X1, Y1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % CALCOLO DEL VICINATO SAFE %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

enemyCell(X,Y) :- enemy(X,Y,_,_,_).
enemyCell(X,Y) :- enemyStern(X,Y).
enemyCell(X,Y) :- enemyBow(X,Y).

neighbourFreeFromMine(X,Y,Dir) :- bowNeighbour(X,Y, Dir), not mine(X, Y).
neighbourFreeFromMine(X,Y,Dir) :- pivotNeighbour(X, Y, Dir), not mine(X, Y).
neighbourFreeFromMine(X,Y,Dir) :- sternNeighbour(X, Y, Dir), not mine(X, Y).

neighbourFreeFromEnemy(X,Y,Dir) :- bowNeighbour(X,Y, Dir), not enemyCell(X, Y).
neighbourFreeFromEnemy(X,Y,Dir) :- pivotNeighbour(X,Y, Dir), not enemyCell(X, Y).
neighbourFreeFromEnemy(X,Y,Dir) :- sternNeighbour(X,Y, Dir), not enemyCell(X, Y).

safeNeighbour(X, Y, Dir) :- bowNeighbour(X,Y, Dir), neighbourFreeFromMine(X,Y,Dir), neighbourFreeFromEnemy(X,Y,Dir).
safeNeighbour(X, Y, Dir) :- pivotNeighbour(X,Y, Dir), neighbourFreeFromMine(X,Y,Dir), neighbourFreeFromEnemy(X,Y,Dir).
safeNeighbour(X, Y, Dir) :- sternNeighbour(X,Y, Dir), neighbourFreeFromMine(X,Y,Dir), neighbourFreeFromEnemy(X,Y,Dir).
