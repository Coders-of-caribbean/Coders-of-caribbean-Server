cell(0..20, 0..22).

%---- Necessario per computare le celle ----%
odd(N) :-  cell(_,N), N2 = N / 2, N2*2 != N.
even(N) :- cell(_,N), not odd(N).

player_pos(X,Y) :- player(X,Y,_,_,_).
enemy_pos(X,Y) :- enemy(X,Y,_,_,_).

% https://github.com/CodinGame/coders-of-the-caribbean/blob/master/Referee.java
cube(XP,YP,ZP, cell(X,Y)) :- cell(X,Y), ZP=Y,  XP=X-(Y/2), even(Y), YP=-(XP+ZP), compute_cell(X,Y).
cube(XP,YP,ZP, cell(X,Y)) :- cell(X,Y), ZP=Y,  XP=X-(Y-1)/2, odd(Y), YP=-(XP+ZP), compute_cell(X,Y).

compute_cell(X,Y) :- player_pos(X,Y).
compute_cell(X,Y) :- enemy_pos(X,Y).
compute_cell(X,Y) :- barrel(X,Y,_).

% Calcolo della distanza tra due celle diverse usando coordinate cubiche
distance(D, cell(X0,Y0), cell(X1,Y1)) :-
    cube(XP0, YP0, ZP0, cell(X0,Y0)),
    cube(XP1, YP1, ZP1, cell(X1,Y1)),
    &abs(XP0 - XP1; ADX), %DX = XP0 - XP1,
    &abs(YP0 - YP1; ADY), %DY = YP0 - YP1,
    &abs(ZP0 - ZP1; ADZ), %DZ = ZP0 - ZP1,
    D = (ADX + ADY + ADZ) / 2.

nearest_rum(player_pos(X,Y), cell(X1,Y1), Distance) :-
                                                    player_pos(X,Y),
                                                    distance(Distance, cell(X,Y), cell(X1,Y1)), barrel(X1,Y1,_),
                                                    Distance = #min{D : distance(D, cell(X,Y), cell(X0,Y0)), barrel(X0,Y0,_)}.

choose(X,Y) | not_choose(X,Y) :- nearest_rum(player_pos(_,_), cell(X,Y),_).
:- #count{X,Y : choose(X,Y)} != 1.

#show choose/2.
#show nearest_rum/3.